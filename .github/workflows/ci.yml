name: DevSecOps Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out code
#         uses: actions/checkout@v3

#       - name: Pull Dockerfile from Docker Hub
#         run: docker pull we45/vul_flask:latest

#       - name: Set up Python 3.12
#         uses: actions/setup-python@v3
#         with:
#           python-version: 3.12-dev
     
#       - name: Create container from image
#         run: docker create --name my-app we45/vul_flask:latest

#       - name: Build Docker image
#         run: docker build -t we45/vul_flaspk .
        

#   sca:
#     name: Software Composition Analysis (SCA) via Dependabot
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Software Composition Analysis (SCA) via Dependabot
#         run: echo "Dependabot is enabled for SCA"

#   sast:
#     name: Static Application Static Testing
#     needs: sca
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out code
#         uses: actions/checkout@v3
      
#       - name: Initialize CodeQL
#         uses: github/codeql-action/init@v2
#         # uses: github/codeql-action/v2@v2.21.9
#         with:
#             languages: python
        
#   dast:
#     name: Dynamic Application Static Testing
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out code
#         uses: actions/checkout@v3
        
#       - name: Install OWASP ZAP
#         run: sudo apt install owasp-zap

#       - name: Run OWASP ZAP scan
#         run: zap-cli -g -u http://localhost:8080 -w report.xml

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Install Python dependencies
      #   run: |
      #     python3 -m venv venv
      #     source venv/bin/activate
      #     # pip install -r requirements.txt

      # - name: Write Python Hello World program
      #   run: |
      #     echo "print('Hello, World!')" > hello_world.py

      - name: Log into docker registry 
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_WORKFLOW_TOKEN }}
     
      - name: Build Docker image
        run: |
             pwd
             ls -lart
             docker build . --file Dockerfile --tag my-devsecops
             docker images
             docker push .

     
      # - name: Login to GitHub Container Registry
      #   run: |
      #    docker login --username arunnagath --password-stdin

      
      # - name: Push Docker image to GitHub Container Registry
      #   run: |
      #     docker push ghcr.io/arunnagath/helloworld:latest
